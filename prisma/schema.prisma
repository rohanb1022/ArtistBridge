// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../lib/generated/prisma"
// }

generator client {
  provider = "prisma-client-js"
  // REMOVE the `output` line if it's there
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  name        String
  category    String?
  priceRange  String?
  city        String?
  bio         String?
  bookings    Booking[]
  password    String
  created_at  DateTime  @default(now())
}

model Organizer {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  name           String
  password       String
  bookings        Booking[]
  artistRequests ArtistRequest[]
}

model Booking {
  id          Int           @id @default(autoincrement())
  artistId    Int
  organizerId Int
  date        DateTime
  time        String
  status      BookingStatus @default(PENDING)
  city        String
  price       Int
  category    String
  artist      Artist        @relation(fields: [artistId], references: [id])
  organizer   Organizer     @relation(fields: [organizerId], references: [id])
}

model ArtistRequest {
  id          Int           @id @default(autoincrement())
  organizerId Int
  email       String
  name        String
  city        String
  category    String
  maxBudget   Int
  eventDate   DateTime
  timing      String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())

  organizer Organizer @relation(fields: [organizerId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REJECTED
}

enum RequestStatus {
  PENDING
  MATCHED
  NOTIFIED
}
